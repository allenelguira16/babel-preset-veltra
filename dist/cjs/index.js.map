{"version":3,"file":"index.js","sources":["../../src/babelPlugin.ts","../../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport * as t from \"@babel/types\";\n\nexport const babelPlugin = declare((api) => {\n  api.assertVersion(7);\n\n  return {\n    name: \"veltra-plugin-babel\",\n    visitor: {\n      JSXExpressionContainer(path) {\n        const expr = path.node.expression;\n\n        // Skip empty expressions\n        if (t.isJSXEmptyExpression(expr)) return;\n\n        // For JSX children, always wrap\n        path.node.expression = t.arrowFunctionExpression([], expr);\n\n        // // Traverse and inject .map() warnings with IIFE\n        // path.traverse({\n        //   CallExpression(innerPath) {\n        //     if (isMapCall(innerPath.node.callee)) {\n        //       injectWarn(innerPath);\n        //       innerPath.skip();\n        //     }\n        //   },\n        //   OptionalCallExpression(innerPath) {\n        //     if (isMapCall(innerPath.node.callee)) {\n        //       injectWarn(innerPath);\n        //       innerPath.skip();\n        //     }\n        //   },\n        // });\n      },\n      JSXAttribute(path) {\n        const attr = path.node;\n\n        if (\n          t.isJSXIdentifier(attr.name, { name: \"ref\" }) &&\n          t.isJSXExpressionContainer(attr.value)\n        ) {\n          const expression = attr.value.expression;\n\n          // Only transform if the ref value is an Identifier (e.g., ref={divElement})\n          if (t.isIdentifier(expression)) {\n            const param = t.identifier(\"el\");\n            const body = t.assignmentExpression(\"=\", expression, param);\n\n            attr.value.expression = t.arrowFunctionExpression([param], body);\n          }\n        }\n      },\n    },\n  };\n});\n","import { TransformOptions } from \"@babel/core\";\nimport { babelPlugin } from \"./babelPlugin\";\nimport babelReactPlugin from \"@babel/preset-react\";\n\n// Main preset function\nexport default function babelPresetVeltra(api: {\n  assertVersion: (range: number) => void;\n}): TransformOptions {\n  api.assertVersion(7);\n\n  return {\n    presets: [\n      [\n        babelReactPlugin,\n        {\n          runtime: \"automatic\",\n          importSource: \"@veltra/app\",\n        },\n      ],\n    ],\n    plugins: [babelPlugin],\n  };\n}\n"],"names":["babelPlugin","declare","api","path","expr","t","attr","expression","param","body","babelPresetVeltra","babelReactPlugin"],"mappings":"ubAGO,MAAMA,EAAcC,EAAAA,QAASC,IAClCA,EAAI,cAAc,CAAC,EAEZ,CACL,KAAM,sBACN,QAAS,CACP,uBAAuBC,EAAM,CAC3B,MAAMC,EAAOD,EAAK,KAAK,WAGnBE,EAAE,qBAAqBD,CAAI,IAG/BD,EAAK,KAAK,WAAaE,EAAE,wBAAwB,GAAID,CAAI,EAiB3D,EACA,aAAaD,EAAM,CACjB,MAAMG,EAAOH,EAAK,KAElB,GACEE,EAAE,gBAAgBC,EAAK,KAAM,CAAE,KAAM,KAAM,CAAC,GAC5CD,EAAE,yBAAyBC,EAAK,KAAK,EACrC,CACA,MAAMC,EAAaD,EAAK,MAAM,WAG9B,GAAID,EAAE,aAAaE,CAAU,EAAG,CAC9B,MAAMC,EAAQH,EAAE,WAAW,IAAI,EACzBI,EAAOJ,EAAE,qBAAqB,IAAKE,EAAYC,CAAK,EAE1DF,EAAK,MAAM,WAAaD,EAAE,wBAAwB,CAACG,CAAK,EAAGC,CAAI,CACjE,CACF,CACF,CACF,CACF,EACD,ECjDD,SAAwBC,EAAkBR,EAErB,CACnB,OAAAA,EAAI,cAAc,CAAC,EAEZ,CACL,QAAS,CACP,CACES,EACA,CACE,QAAS,YACT,aAAc,aAChB,CACF,CACF,EACA,QAAS,CAACX,CAAW,CACvB,CACF"}